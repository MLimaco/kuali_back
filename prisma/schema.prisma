// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Define el generador del cliente Prisma (para usar en Node.js)

generator client {
  provider = "prisma-client-js"
}

// Fuente de datos: usualmente PostgreSQL, usa DATABASE_URL desde .env

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- MODELOS --------------------

model Company {
  id       Int       @id @default(autoincrement()) // Clave primaria autoincremental
  name     String // Nombre de la empresa
  ruc      String // RUC (registro único)
  size     String? // Tamaño de la empresa (opcional)
  website  String? // URL del sitio web (opcional)
  sector   String? // Sector de la empresa (opcional)
  createAt DateTime  @default(now()) // Fecha de creación del registro
  updateAt DateTime? // Fecha de actualización del registro
  deleteAt DateTime? // Fecha de eliminación lógica (opcional)

  leads       Lead[] // Relación uno a muchos con leads
  contactLogs ContactLog[] @relation("CompanyContactLogs") // <-- Agrega esta línea

  @@map("company") // Mapea este modelo a la tabla "leads" dentro del schema "kuali_api"
}

model User {
  id    Int     @id @default(autoincrement()) // Clave primaria
  name  String // Nombre del usuario
  email String // Email del usuario
  phone String? // Teléfono (opcional)

  leads               Lead[]              @relation("LeadOwner") // Relación con leads donde es dueño
  contactLogs         ContactLog[]        @relation("UserContactLogs") // Relación con logs de contacto
  contactLogHistories ContactLogHistory[] // Relación con historial de logs de contacto

  @@map("user") // Mapea este modelo a la tabla "leads" dentro del schema "kuali_api"
}

model Template {
  id       Int       @id @default(autoincrement()) // Clave primaria
  name     String // Nombre de a quien va dirigido el mensaje
  subject  String // Asunto del mensaje
  content  String // Contenido del mensaje (SALUDO, DESPEDIDA, FOLLOW UP, PROPUESTA, ETC)
  type     String // Tipo (CHAT, EMAIL, LLAMADA, MEET, ETC.)
  createAt DateTime  @default(now()) // Fecha de creación
  updateAt DateTime? // Fecha de actualización
  deleteAt DateTime? // Fecha de eliminación lógica (opcional)

  @@map("template") // Mapea este modelo a la tabla "leads" dentro del schema "kuali_api"
}

model Lead {
  id              Int       @id @default(autoincrement()) // Clave primaria
  firstName       String // Nombre
  lastName        String // Apellido
  mail            String? // Correo
  phone           String? // Teléfono
  linkedinProfile String? // Perfil de LinkedIn (opcional)
  rol             String? // Rol en la empresa
  senority        String? // Nivel de antigüedad
  area            String? // Área de trabajo
  createAt        DateTime  @default(now()) // Fecha de creación
  updateAt        DateTime? // Fecha de actualización
  deleteAt        DateTime? // Fecha de eliminación lógica
  nextStep        String? // Próximo paso a dar
  status          String? // Estado (contactado, pendiente, etc.)

  companyID Int // FK a Company
  ownerID   Int // FK a User (dueño del lead)

  company Company @relation(fields: [companyID], references: [id]) // Relación con empresa
  owner   User    @relation("LeadOwner", fields: [ownerID], references: [id]) // Relación con usuario

  contactLogs ContactLog[] // Historial de contactos con este lead

  @@map("lead") // Mapea este modelo a la tabla "leads" dentro del schema "kuali_api"
}

model ContactLog {
  id        Int      @id @default(autoincrement()) // Clave primaria
  type      String // Tipo de Contacto (CHAT, EMAIL, LLAMADA, MEET, ETC.)
  status    String // Estado del contacto (SEND, PENDING, ETC.)
  notes     String? // Notas adicionales
  createAt  DateTime @default(now()) // Fecha de creación
  updatedAt DateTime @updatedAt // <-- Nuevo campo

  leadID    Int // FK a Lead
  companyID Int // FK a Company
  userID    Int // FK a User (quien realizó el contacto)

  lead    Lead    @relation(fields: [leadID], references: [id])
  company Company @relation("CompanyContactLogs", fields: [companyID], references: [id])
  user    User    @relation("UserContactLogs", fields: [userID], references: [id])

  histories ContactLogHistory[] // Relación con historial

  @@map("contact_log")
}

model ContactLogHistory {
  id           Int      @id @default(autoincrement())
  contactLogID Int
  status       String
  notes        String?
  userID       Int
  changedAt    DateTime @default(now())

  contactLog ContactLog @relation(fields: [contactLogID], references: [id])
  user       User       @relation(fields: [userID], references: [id])

  @@map("contact_log_history") // <-- Esto mapea el modelo a la tabla con ese nombre
}
